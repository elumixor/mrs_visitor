name: mrs_visitor
root: ./
startup_window: "visitor (server + client)"
pre_window: "export UAV_TYPE=f550;
  export UAV_NAME=uav1;
  export SENSORS=garmin_down;
  export ODOMETRY_TYPE=gps"

windows:
  - roscore+status:
      layout: tiled
      panes:
        - roscore
        - waitForSimulation; roslaunch mrs_uav_status status.launch

  - simulation (gazebo) + RViz:
      layout: tiled
      panes:
        # Simulation + Gazebo
        - "export GAZEBO_MODEL_PATH=$GAZEBO_MODEL_PATH:$(rospack find mrs_visitor)/resources/models;
          waitForRos; roslaunch mrs_simulation simulation.launch \
          world_file:=$(rospack find mrs_visitor)/tmux_scripts/world.world \
          gui:=true" # set gui:=false if you don't need Gazebo

        # RViz
        - waitForControl; rviz -d ./rviz.rviz

        # This one maybe we don't need, it snaps the camera to the drone, essentially
        # - waitForOdometry; gz camera -c gzclient_camera -f uav1; history -s gz camera -c gzclient_camera -f uav1

  - spawn:
      layout: tiled
      panes:
        # We spawn 2 UAVs here
        - waitForSimulation; rosservice call /mrs_drone_spawner/spawn "1 $UAV_TYPE --pos 0 0 4.0 0"

  - control:
      layout: tiled
      panes:
        # The control core has to be run for each drone separately
        - waitForOdometry; roslaunch mrs_uav_general core.launch

  - takeoff:
      layout: tiled
      panes:
        # Takeoff the uav1
        - "waitForControl;
          rosservice call /$UAV_NAME/control_manager/motors 1;
          rosservice call /$UAV_NAME/mavros/cmd/arming 1;
          rosservice call /$UAV_NAME/mavros/set_mode 0 offboard;
          rosservice call /$UAV_NAME/uav_manager/takeoff"

  - visitor (server + client):
      layout: even-vertical
      panes:
        - roslaunch mrs_visitor mrs_visitor.launch;
        - |
          if [ -n "$ZSH_VERSION" ]; then
            print -s rosrun mrs_visitor client.py
          elif [ -n "$BASH_VERSION" ]; then
            history -s rosrun mrs_visitor client.py
          fi
